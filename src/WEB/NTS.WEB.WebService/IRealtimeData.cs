//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.269
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name = "Interface", Namespace = "http://localhost/Interface.wsdl")]
public partial class IRealtimeData : System.Web.Services.Protocols.SoapHttpClientProtocol
{

    private System.Threading.SendOrPostCallback serloginOperationCompleted;

    private System.Threading.SendOrPostCallback sergetuserinfoOperationCompleted;

    private System.Threading.SendOrPostCallback sergetuserpassOperationCompleted;

    private System.Threading.SendOrPostCallback serishavepermissionOperationCompleted;

    private System.Threading.SendOrPostCallback sergetcurrentdataOperationCompleted;

    /// <remarks/>
    public IRealtimeData()
    {
        this.Url = System.Configuration.ConfigurationManager.AppSettings["realtimedataurl"].ToString();
    }

    /// <remarks/>
    public event serloginCompletedEventHandler serloginCompleted;

    /// <remarks/>
    public event sergetuserinfoCompletedEventHandler sergetuserinfoCompleted;

    /// <remarks/>
    public event sergetuserpassCompletedEventHandler sergetuserpassCompleted;

    /// <remarks/>
    public event serishavepermissionCompletedEventHandler serishavepermissionCompleted;

    /// <remarks/>
    public event sergetcurrentdataCompletedEventHandler sergetcurrentdataCompleted;

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName = "ser-login", RequestNamespace = "urn:ser_login", ResponseElementName = "ser-loginResponse", ResponseNamespace = "urn:ser_login", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void serlogin([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] string password, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] out System.Nullable<bool> res, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool resSpecified)
    {
        object[] results = this.Invoke("serlogin", new object[] {
                    username,
                    password});
        res = ((System.Nullable<bool>)(results[0]));
        resSpecified = ((bool)(results[1]));
    }

    /// <remarks/>
    public System.IAsyncResult Beginserlogin(string username, string password, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("serlogin", new object[] {
                    username,
                    password}, callback, asyncState);
    }

    /// <remarks/>
    public void Endserlogin(System.IAsyncResult asyncResult, out System.Nullable<bool> res, out bool resSpecified)
    {
        object[] results = this.EndInvoke(asyncResult);
        res = ((System.Nullable<bool>)(results[0]));
        resSpecified = ((bool)(results[1]));
    }

    /// <remarks/>
    public void serloginAsync(string username, string password)
    {
        this.serloginAsync(username, password, null);
    }

    /// <remarks/>
    public void serloginAsync(string username, string password, object userState)
    {
        if ((this.serloginOperationCompleted == null))
        {
            this.serloginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserloginOperationCompleted);
        }
        this.InvokeAsync("serlogin", new object[] {
                    username,
                    password}, this.serloginOperationCompleted, userState);
    }

    private void OnserloginOperationCompleted(object arg)
    {
        if ((this.serloginCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.serloginCompleted(this, new serloginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName = "ser-getuserinfo", RequestNamespace = "urn:ser_login", ResponseElementName = "ser-getuserinfoResponse", ResponseNamespace = "urn:ser_login", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("strinfo", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)]
    public string sergetuserinfo([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] string username)
    {
        object[] results = this.Invoke("sergetuserinfo", new object[] {
                    username});
        return ((string)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult Beginsergetuserinfo(string username, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("sergetuserinfo", new object[] {
                    username}, callback, asyncState);
    }

    /// <remarks/>
    public string Endsergetuserinfo(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    /// <remarks/>
    public void sergetuserinfoAsync(string username)
    {
        this.sergetuserinfoAsync(username, null);
    }

    /// <remarks/>
    public void sergetuserinfoAsync(string username, object userState)
    {
        if ((this.sergetuserinfoOperationCompleted == null))
        {
            this.sergetuserinfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsergetuserinfoOperationCompleted);
        }
        this.InvokeAsync("sergetuserinfo", new object[] {
                    username}, this.sergetuserinfoOperationCompleted, userState);
    }

    private void OnsergetuserinfoOperationCompleted(object arg)
    {
        if ((this.sergetuserinfoCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.sergetuserinfoCompleted(this, new sergetuserinfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName = "ser-getuserpass", RequestNamespace = "urn:ser_login", ResponseElementName = "ser-getuserpassResponse", ResponseNamespace = "urn:ser_login", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("strpass", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)]
    public string sergetuserpass([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] string username)
    {
        object[] results = this.Invoke("sergetuserpass", new object[] {
                    username});
        return ((string)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult Beginsergetuserpass(string username, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("sergetuserpass", new object[] {
                    username}, callback, asyncState);
    }

    /// <remarks/>
    public string Endsergetuserpass(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    /// <remarks/>
    public void sergetuserpassAsync(string username)
    {
        this.sergetuserpassAsync(username, null);
    }

    /// <remarks/>
    public void sergetuserpassAsync(string username, object userState)
    {
        if ((this.sergetuserpassOperationCompleted == null))
        {
            this.sergetuserpassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsergetuserpassOperationCompleted);
        }
        this.InvokeAsync("sergetuserpass", new object[] {
                    username}, this.sergetuserpassOperationCompleted, userState);
    }

    private void OnsergetuserpassOperationCompleted(object arg)
    {
        if ((this.sergetuserpassCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.sergetuserpassCompleted(this, new sergetuserpassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName = "ser-ishavepermission", RequestNamespace = "urn:ser_login", ResponseElementName = "ser-ishavepermissionResponse", ResponseNamespace = "urn:ser_login", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void serishavepermission([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] string username, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int menuid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] out System.Nullable<bool> res, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool resSpecified)
    {
        object[] results = this.Invoke("serishavepermission", new object[] {
                    username,
                    menuid});
        res = ((System.Nullable<bool>)(results[0]));
        resSpecified = ((bool)(results[1]));
    }

    /// <remarks/>
    public System.IAsyncResult Beginserishavepermission(string username, int menuid, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("serishavepermission", new object[] {
                    username,
                    menuid}, callback, asyncState);
    }

    /// <remarks/>
    public void Endserishavepermission(System.IAsyncResult asyncResult, out System.Nullable<bool> res, out bool resSpecified)
    {
        object[] results = this.EndInvoke(asyncResult);
        res = ((System.Nullable<bool>)(results[0]));
        resSpecified = ((bool)(results[1]));
    }

    /// <remarks/>
    public void serishavepermissionAsync(string username, int menuid)
    {
        this.serishavepermissionAsync(username, menuid, null);
    }

    /// <remarks/>
    public void serishavepermissionAsync(string username, int menuid, object userState)
    {
        if ((this.serishavepermissionOperationCompleted == null))
        {
            this.serishavepermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnserishavepermissionOperationCompleted);
        }
        this.InvokeAsync("serishavepermission", new object[] {
                    username,
                    menuid}, this.serishavepermissionOperationCompleted, userState);
    }

    private void OnserishavepermissionOperationCompleted(object arg)
    {
        if ((this.serishavepermissionCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.serishavepermissionCompleted(this, new serishavepermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestElementName = "ser-getcurrentdata", RequestNamespace = "urn:ser_login", ResponseElementName = "ser-getcurrentdataResponse", ResponseNamespace = "urn:ser_login", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("res", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = true)]
    public string sergetcurrentdata([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int objid, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int objclass, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] int type)
    {
        object[] results = this.Invoke("sergetcurrentdata", new object[] {
                    objid,
                    objclass,
                    type});
        return ((string)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult Beginsergetcurrentdata(int objid, int objclass, int type, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("sergetcurrentdata", new object[] {
                    objid,
                    objclass,
                    type}, callback, asyncState);
    }

    /// <remarks/>
    public string Endsergetcurrentdata(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    /// <remarks/>
    public void sergetcurrentdataAsync(int objid, int objclass, int type)
    {
        this.sergetcurrentdataAsync(objid, objclass, type, null);
    }

    /// <remarks/>
    public void sergetcurrentdataAsync(int objid, int objclass, int type, object userState)
    {
        if ((this.sergetcurrentdataOperationCompleted == null))
        {
            this.sergetcurrentdataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsergetcurrentdataOperationCompleted);
        }
        this.InvokeAsync("sergetcurrentdata", new object[] {
                    objid,
                    objclass,
                    type}, this.sergetcurrentdataOperationCompleted, userState);
    }

    private void OnsergetcurrentdataOperationCompleted(object arg)
    {
        if ((this.sergetcurrentdataCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.sergetcurrentdataCompleted(this, new sergetcurrentdataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    public new void CancelAsync(object userState)
    {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void serloginCompletedEventHandler(object sender, serloginCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class serloginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal serloginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Nullable<bool> res
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Nullable<bool>)(this.results[0]));
        }
    }

    /// <remarks/>
    public bool resSpecified
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void sergetuserinfoCompletedEventHandler(object sender, sergetuserinfoCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class sergetuserinfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal sergetuserinfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public string Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void sergetuserpassCompletedEventHandler(object sender, sergetuserpassCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class sergetuserpassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal sergetuserpassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public string Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void serishavepermissionCompletedEventHandler(object sender, serishavepermissionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class serishavepermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal serishavepermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public System.Nullable<bool> res
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((System.Nullable<bool>)(this.results[0]));
        }
    }

    /// <remarks/>
    public bool resSpecified
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void sergetcurrentdataCompletedEventHandler(object sender, sergetcurrentdataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class sergetcurrentdataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal sergetcurrentdataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public string Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
